# PRIMITIVE GRAMMAR 2
# Grammar representing a subset of the grammar language written in a simple subset of itself.
# Every line containing a rule must be a single concatenation node (nodes separated by space).
# Every node is either a reference or a terminal string. This grammar can be parsed with the
# primitive grammar 1.
#
# FEATURES
# Alternatives can be specified by multiple rule lines for the same rule name. Concatenations
# are represented just by concatenating the parts together with space inbetween. Terminal
# symbols now be written as codepoints or characters 'x'.

root => rules[]=lines
lines => line '\n' lines # line array separated by newline characters
lines => line
line => comment
line => *=rule
line => *=rule space comment # allow rules to be commented
line => () # allow empty lines

comment => '#' anystring
anystring => ()
anystring => -'\n';. anystring # any char but '\n'

space => ()
space => ' ' space

symbol => 'A'-'Z';'_';'a'-'z';128-. symbol_ # symbols must not start with a digit
symbol_ => ()
symbol_ => '0'-'9';'A'-'Z';'_';'a'-'z';128-. symbol_

rule => left[*]=symbol space '=>' space right=node2

node2 => node1
node1 => node0

node2 => alternative[]=alternative
node1 => concatenation[]=concat
node0 => structure=name space '=' space definition=node0
node0 => '(' space node2 space ')'
node0 => '(' space ')' empty=()
node0 => '(' space minspec ':' space maxspec '|' space repetition=node2 space greedyspec ')'
node0 => terminal[]=terminal
node0 => reference[*]=symbol parameter=()

# if uncommented, min will default to 0. (This is as unintuitive as defaulting to 1 so it must be explicitly set)
#minspec => ()
minspec => min[*]=int space
maxspec => ()
maxspec => max[*]=int space
greedyspec => ()
greedyspec => '+' greedy=() space

alternative => *=node1
alternative => *=node1 space '|' space alternative

concat => *=node0 # concat can be a single node
concat => *=node0 ' ' space concat

terminal => *=signedterminalstring
terminal => *=signedterminalstring space ';' space terminal
signedterminalstring => sign[*]='-' space parts[]=terminalstring # optional '-' as sign
signedterminalstring => parts[]=terminalstring

terminalstring => *=terminalpart
terminalstring => *=terminalpart space '*' space terminalstring # concatenate with *

terminalpart => '\'' string[*]=escapedstring '\''
terminalpart => range=terminalrange
terminalpart => value=terminalvalue

terminalrange => start=rangebound space '-' space stop=rangebound
terminalrange => '.' wildcard=()
rangebound => terminalvalue
rangebound => '.' wildcard=()

terminalvalue => codepoint[*]=int
terminalvalue => '\'' char[*]=escapedchar '\''

escapedchar => '\\'*.;-'\n';-'\\';-'\'';.
escapedstring => escapedchar escapedstring
escapedstring => escapedchar escapedchar

name => key[*]=symbol dict=() # dict key (element type: dict)
name => key[*]=symbol array=() '[]' # [] dict key (element type: array)
name => key[*]=symbol string=() '[*]' # [*] dict key (element type: string)
name => '*' dict=() # * array element (element type: dict)
name => '[]' array=() # [] array element (element type: array)
name => '[*]' string=() # [*] array element (element type: string)
name => '_' ignore=() # _ ignore char

int => '0' # 0
int => '1'-'9' int_
int_ => '0'-'9' int_
int_ => ()
